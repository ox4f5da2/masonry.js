{}(function(){function Element(a){this.tag=a}
Element.prototype.css=function(a){for(let key in a){this.tag.style[key]=a[key]}}
function Masonry(a,b,...args){this.boxs=a;this.className=b;this.masonry=document.querySelector(this.className);this.boxWidth=args[0]||200;this.padding=args[1]||10;this.gap=args[2]||10;this.init()}
    Masonry.prototype.init = function () { let that = this; this.masonry.style.margin = '0 auto'; this.masonry.style.position = 'relative'; this.boxs.forEach(item => { new Element(item).css({ 'width': this.boxWidth + 'px', 'padding': this.padding + 'px', 'margin-right': this.gap + 'px', 'box-sizing': 'border-box', 'float': 'left', 'border': '1px solid #ccc', 'transition': 'all .5s' }); item.addEventListener('mouseover', function () { item.style.cursor = 'pointer'; item.style.boxShadow = '0px 0px 5px #666' }); item.addEventListener('mouseout', function () { item.style.cursor = 'default'; item.style.boxShadow = '' }); this.masonry.appendChild(item) }); window.addEventListener('load', function () { that.loadPage(document.body.offsetWidth, that.boxWidth + that.gap) });window.addEventListener('resize',function(){that.loadPage(document.body.offsetWidth,that.boxWidth+that.gap)})}
Masonry.prototype.getMinimumIndex=function(a){let index=0;for(let i=0;i<a.length;i++){if(a[i]<a[index]){index=i}}
return index}
Masonry.prototype.loadPage=function(a,b){let maxNum=Math.floor(a/b);this.masonry.style.marginLeft=(a-b*maxNum)/2+'px';let boxHeight=[];let boxIfLoadedTimer=setInterval(()=>{let len=this.boxs.length
for(var i=0;i<len;i++){if(this.boxs[i].querySelector('img')!==null){if(this.boxs[i].querySelector('img').offsetHeight===0){break}}}
    if (i === this.boxs.length) { clearInterval(boxIfLoadedTimer); for (let i = 0; i < len; i++) { if (i < maxNum) { boxHeight[i] = this.boxs[i].offsetHeight; this.boxs[i].style.position = 'static'; this.boxs[i].style.marginTop = this.gap + 'px' } else { let minIndex = this.getMinimumIndex(boxHeight); new Element(this.boxs[i]).css({ 'margin-top': '0px', 'position': 'absolute', 'left': minIndex * b + 'px', 'top': boxHeight[minIndex] + 2 * this.gap + 'px' });boxHeight[minIndex]+=this.boxs[i].offsetHeight+this.gap}}}},10)}
window.Masonry=Masonry;window.Element=Element})()